<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://www.makerlabs.space/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.makerlabs.space/" rel="alternate" type="text/html" /><updated>2025-03-29T13:25:26-04:00</updated><id>https://www.makerlabs.space/feed.xml</id><title type="html">Maker Labs</title><subtitle>A place for me to explore my curiosity and share it with the wotld</subtitle><entry><title type="html">Custom Code Container</title><link href="https://www.makerlabs.space/post/2025/03/21/code-preview.html" rel="alternate" type="text/html" title="Custom Code Container" /><published>2025-03-21T18:46:47-04:00</published><updated>2025-03-21T18:46:47-04:00</updated><id>https://www.makerlabs.space/post/2025/03/21/code-preview</id><content type="html" xml:base="https://www.makerlabs.space/post/2025/03/21/code-preview.html"><![CDATA[<p>I wasn't happy with how code was formatting in these posts. ChatGPT was able to help me extend Rouge highlighting built into Jekyll. I created a custom <code>_include/after-content.html</code> instead of modifying the default layout. The change gets applied to all <code>&#123;% highlight xxxx %&#125;</code> sections and gets implemented at build time. This likely will only work when building the site locally.</p>

<h2 id="_pluginshighlight_overriderb">_plugins/highlight_override.rb</h2>
<p>This puts the highlighted code block into code-block-container and adds a label for the code type and a copy code button.
</p>
<div class="code-block-container">
  <div class="code-header">
    <strong>ruby</strong>
    <button class="copy-button">Copy Code</button>
  </div>
  <div class="code-block">
    <figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">module</span> <span class="nn">Tags</span>
    <span class="k">class</span> <span class="nc">HighlightBlock</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Block</span>
      <span class="kp">alias_method</span> <span class="ss">:original_render</span><span class="p">,</span> <span class="ss">:render</span>

      <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
        <span class="c1"># Call the original highlight render method</span>
        <span class="n">highlighted_code</span> <span class="o">=</span> <span class="n">original_render</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="nf">strip</span>
        <span class="n">lang</span> <span class="o">=</span> <span class="vi">@markup</span><span class="p">.</span><span class="nf">strip</span><span class="p">.</span><span class="nf">split</span><span class="p">.</span><span class="nf">first</span> <span class="o">||</span> <span class="s2">"plaintext"</span>

        <span class="o">&lt;&lt;~</span><span class="no">HTML</span><span class="sh">
        &lt;div class="code-block-container"&gt;
          &lt;div class="code-header"&gt;
            &lt;strong&gt;</span><span class="si">#{</span><span class="n">lang</span><span class="si">}</span><span class="sh">&lt;/strong&gt;
            &lt;button class="copy-button"&gt;Copy Code&lt;/button&gt;
          &lt;/div&gt;
          &lt;div class="code-block"&gt;
            </span><span class="si">#{</span><span class="n">highlighted_code</span><span class="si">}</span><span class="sh">
          &lt;/div&gt;
        &lt;/div&gt;
</span><span class="no">        HTML</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>
  </div>
</div>

<h2 id="_includeafter-contenthtml">_include/after-content.html</h2>
<p>This styles the block and adds functionality to the button
</p>
<div class="code-block-container">
  <div class="code-header">
    <strong>html</strong>
    <button class="copy-button">Copy Code</button>
  </div>
  <div class="code-block">
    <figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style&gt;</span>
<span class="nc">.code-block-container</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#1e1e1e</span><span class="p">;</span> <span class="c">/* Black background */</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.code-header</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#333</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-between</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.code-header</span> <span class="nt">button</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#828282</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.9rem</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.code-header</span> <span class="nt">button</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#bcbabb</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.code-block</span><span class="nd">::-webkit-scrollbar</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.code-block</span><span class="nd">::-webkit-scrollbar-thumb</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#888</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.code-block</span><span class="nd">::-webkit-scrollbar-thumb:hover</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#555</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>


<span class="nt">&lt;script&gt;</span>
<span class="c1">// Adding the Copy functionality for each code block</span>
<span class="kd">const</span> <span class="nx">copyButtonLabel</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Copy Code</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// Find all code blocks</span>
<span class="kd">let</span> <span class="nx">blocks</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.code-block-container</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">blocks</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">blocks</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">block</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.copy-button</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// Add copy button functionality if Clipboard API is supported</span>
  <span class="k">if </span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">button</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">block</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">code</span><span class="dl">"</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">code</span><span class="p">.</span><span class="nx">innerText</span><span class="p">;</span>

      <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">.</span><span class="nf">writeText</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>

      <span class="c1">// Change button text to "Code Copied" after copying</span>
      <span class="nx">button</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Code Copied</span><span class="dl">"</span><span class="p">;</span>

      <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">button</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">copyButtonLabel</span><span class="p">;</span>
      <span class="p">},</span> <span class="mi">700</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>
<span class="nt">&lt;/script&gt;</span></code></pre></figure>
  </div>
</div>]]></content><author><name></name></author><category term="post" /><summary type="html"><![CDATA[I wasn't happy with how code was formatting in these posts. ChatGPT was able to help me extend Rouge highlighting built into Jekyll. I created a custom _include/after-content.html instead of modifying the default layout. The change gets applied to all &#123;% highlight xxxx %&#125; sections and gets implemented at build time. This likely will only work when building the site locally.]]></summary></entry><entry><title type="html">Favicon Script</title><link href="https://www.makerlabs.space/2025/03/21/favicon-script.html" rel="alternate" type="text/html" title="Favicon Script" /><published>2025-03-21T11:53:58-04:00</published><updated>2025-03-21T11:53:58-04:00</updated><id>https://www.makerlabs.space/2025/03/21/favicon-script</id><content type="html" xml:base="https://www.makerlabs.space/2025/03/21/favicon-script.html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Hopefully your browser tab shows my makerlabs logo. I used a shell script to generate a multilayer favicon and told your browser to use it. A favicon, short for "favorite icon," is a small image associated with a website. It appears in browser tabs, bookmarks, and other locations to identify this site.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Favicons need to be available in multiple sizes to accommodate different devices and display contexts. The most common way to package them is in a multi-resolution .ico file, which contains several versions of the icon ranging from 16x16 pixels to 512x512 pixels. This ensures compatibility across web browsers, operating systems, and mobile devices.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;To create a favicon that remains sharp and clear at all sizes, I chose to use an SVG file as the starting point. Unlike raster images such as PNG or JPG, an SVG is a vector-based format, meaning it can be scaled to any size without losing quality. This approach avoids pixelation or blurring that often occurs when resizing raster images, ensuring crisp edges and smooth curves at every resolution.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;The script I wrote automates the process of generating a favicon from an SVG. It begins by checking that the necessary files and directories exist, ensuring that the workflow runs smoothly. Using Inkscape, it scales the SVG to multiple standard favicon sizes. Each scaled version is then converted to PNG format while preserving the original clarity of the design. To prevent transparency issues, ImageMagick processes the images by adding a solid white background where needed. Finally, all PNG versions are combined into a single .ico file, which is compatible with web browsers and other applications. The script also cleans up temporary files, keeping the directory structure organized.</p>
<div>
<img src="/favicon.svg" alt="192x192 svg" width="192" height="192" />
</div>
<p><br /></p>
<div class="code-block-container">
  <div class="code-header">
    <strong>shell</strong>
    <button class="copy-button">Copy Code</button>
  </div>
  <div class="code-block">
    <figure class="highlight"><pre><code class="language-shell" data-lang="shell">pkg update <span class="o">&amp;&amp;</span> pkg upgrade
pkg <span class="nb">install </span>imagemagick inkscape</code></pre></figure>
  </div>
</div>

<div class="code-block-container">
  <div class="code-header">
    <strong>bash</strong>
    <button class="copy-button">Copy Code</button>
  </div>
  <div class="code-block">
    <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/data/data/com.termux/files/usr/bin/bash</span>

<span class="c"># Check if assets/images directory exists</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> <span class="s2">"assets/images/"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Error: Directory 'assets/images/' not found."</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>
<span class="c"># Check if favicon.svg exists in the parent directory</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"assets/images/favicon.svg"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Error: File 'favicon.svg' not found."</span>
    <span class="nb">exit </span>2
<span class="k">fi

</span><span class="nb">cd </span>assets/images/
<span class="nb">mkdir</span> <span class="nt">-p</span> favicons
<span class="nb">cd </span>favicons

<span class="nv">sizes</span><span class="o">=(</span>16 32 140 192 409 512<span class="o">)</span>

<span class="k">for </span>size <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">sizes</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    </span>inkscape <span class="nt">-w</span> <span class="nv">$size</span> <span class="nt">-h</span> <span class="nv">$size</span> <span class="nt">--export-png-compression</span><span class="o">=</span>0 <span class="nt">--export-png-antialias</span><span class="o">=</span>2 <span class="nt">-b</span> <span class="s2">"#FFFFFF"</span> <span class="nt">-y</span> 0.0 <span class="nt">--export-png-color-mode</span><span class="o">=</span>RGBA_8 ../favicon.svg <span class="nt">-o</span> favicon-<span class="k">${</span><span class="nv">size</span><span class="k">}</span>.png 2&gt;/dev/null
<span class="k">done</span>

<span class="c"># Combine 16x16 and 32x32 into favicon.ico</span>
magick favicon-32.png favicon-16.png <span class="nt">-colors</span> 256 favicon.ico

magick favicon-140.png <span class="nt">-background</span> <span class="s2">"#700000"</span> <span class="nt">-gravity</span> center <span class="nt">-extent</span> 180x180 apple-touch-icon.png

magick favicon-409.png <span class="nt">-background</span> <span class="s2">"#700000"</span> <span class="nt">-gravity</span> center <span class="nt">-extent</span> 512x512 favicon_mask.png

<span class="nb">mv </span>favicon.ico ../../../
<span class="nb">cp </span>favicon.svg ../../../
<span class="nb">mv </span>apple-touch-icon.png ../../../
<span class="nb">mv </span>favicon_mask.png ../../../
<span class="nb">cd</span> ../../../

<span class="nb">rm </span>_includes/favicon.html 2&gt;/dev/null
<span class="nb">touch </span>_includes/favicon.html
<span class="nv">href</span><span class="o">=</span><span class="se">\"</span>/favicon.ico<span class="se">\"</span> <span class="nv">sizes</span><span class="o">=</span><span class="se">\"</span>32x32<span class="se">\"</span><span class="o">&gt;</span><span class="s2">" &gt;&gt; _includes/favicon.html
echo "</span>&lt;<span class="nb">link </span><span class="nv">rel</span><span class="o">=</span><span class="se">\"</span>icon<span class="se">\"</span> <span class="nv">href</span><span class="o">=</span><span class="se">\"</span>/favicon.svg<span class="se">\"</span> <span class="nb">type</span><span class="o">=</span><span class="se">\"</span>image/svg+xml<span class="se">\"</span><span class="o">&gt;</span><span class="s2">" &gt;&gt; _includes/favicon.html
echo "</span>&lt;<span class="nb">link </span><span class="nv">rel</span><span class="o">=</span><span class="se">\"</span>apple-touch-icon<span class="se">\"</span> <span class="nv">href</span><span class="o">=</span><span class="se">\"</span>/apple-touch-icon.png<span class="se">\"</span> <span class="nb">type</span><span class="o">=</span><span class="se">\"</span>image/png<span class="se">\"</span> <span class="nv">sizes</span><span class="o">=</span><span class="se">\"</span>180x180<span class="se">\"</span><span class="o">&gt;</span><span class="s2">" &gt;&gt; _includes/favicon.html
echo "</span>&lt;<span class="nb">link </span><span class="nv">rel</span><span class="o">=</span><span class="se">\"</span>icon<span class="se">\"</span> <span class="nv">href</span><span class="o">=</span><span class="se">\"</span>/favicon-mask.png<span class="se">\"</span> <span class="nb">type</span><span class="o">=</span><span class="se">\"</span>image/png<span class="se">\"</span> <span class="nv">sizes</span><span class="o">=</span><span class="se">\"</span>512x512<span class="se">\"</span> <span class="nv">purpose</span><span class="o">=</span><span class="se">\"</span>maskable<span class="se">\"</span><span class="o">&gt;</span><span class="s2">" &gt;&gt; _includes/favicon.html

for size in "</span><span class="k">${</span><span class="nv">sizes</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"; do
    echo "</span>&lt;<span class="nb">link </span><span class="nv">rel</span><span class="o">=</span><span class="se">\"</span>icon<span class="se">\"</span> <span class="nv">href</span><span class="o">=</span><span class="se">\"</span>/assets/images/favicons/favicon-<span class="k">${</span><span class="nv">size</span><span class="k">}</span>.png<span class="se">\"</span> <span class="nb">type</span><span class="o">=</span><span class="se">\"</span>image/png<span class="se">\"</span> <span class="nv">sizes</span><span class="o">=</span><span class="se">\"</span><span class="k">${</span><span class="nv">size</span><span class="k">}</span>x<span class="k">${</span><span class="nv">size</span><span class="k">}</span><span class="se">\"</span><span class="o">&gt;</span><span class="s2">" &gt;&gt; _includes/favicon.html
done

echo "</span>Success: <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/favicon.ico<span class="s2">" </span></code></pre></figure>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const svgDot = `<img src="../../../favicon_period.svg" width="2" height="2" style="display: inline-block; transform: translate(.05em,.22em);">`;
    
    function replacePeriodsWithSVG() {
        document.querySelectorAll("p").forEach(el => {
            el.innerHTML = el.innerHTML.replace(/\./g, svgDot);
        });
    }

    replacePeriodsWithSVG();
});
</script>]]></content><author><name></name></author><summary type="html"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;Hopefully your browser tab shows my makerlabs logo. I used a shell script to generate a multilayer favicon and told your browser to use it. A favicon, short for "favorite icon," is a small image associated with a website. It appears in browser tabs, bookmarks, and other locations to identify this site. &nbsp;&nbsp;&nbsp;&nbsp;Favicons need to be available in multiple sizes to accommodate different devices and display contexts. The most common way to package them is in a multi-resolution .ico file, which contains several versions of the icon ranging from 16x16 pixels to 512x512 pixels. This ensures compatibility across web browsers, operating systems, and mobile devices. &nbsp;&nbsp;&nbsp;&nbsp;To create a favicon that remains sharp and clear at all sizes, I chose to use an SVG file as the starting point. Unlike raster images such as PNG or JPG, an SVG is a vector-based format, meaning it can be scaled to any size without losing quality. This approach avoids pixelation or blurring that often occurs when resizing raster images, ensuring crisp edges and smooth curves at every resolution. &nbsp;&nbsp;&nbsp;&nbsp;The script I wrote automates the process of generating a favicon from an SVG. It begins by checking that the necessary files and directories exist, ensuring that the workflow runs smoothly. Using Inkscape, it scales the SVG to multiple standard favicon sizes. Each scaled version is then converted to PNG format while preserving the original clarity of the design. To prevent transparency issues, ImageMagick processes the images by adding a solid white background where needed. Finally, all PNG versions are combined into a single .ico file, which is compatible with web browsers and other applications. The script also cleans up temporary files, keeping the directory structure organized. shell Copy Code pkg update &amp;&amp; pkg upgrade pkg install imagemagick inkscape]]></summary></entry><entry><title type="html">Homelab Setup</title><link href="https://www.makerlabs.space/homelab/2025/03/17/post-1.html" rel="alternate" type="text/html" title="Homelab Setup" /><published>2025-03-17T03:37:05-04:00</published><updated>2025-03-17T03:37:05-04:00</updated><id>https://www.makerlabs.space/homelab/2025/03/17/post-1</id><content type="html" xml:base="https://www.makerlabs.space/homelab/2025/03/17/post-1.html"><![CDATA[<p>I’m building a homelab for virtualization and development of Ai applications and other random widgets.</p>

<ul>
  <li>
    <p>Cisco 24port POE gigabit switch</p>
  </li>
  <li>pfSense
    <ul>
      <li>Intel(R) Core(TM) i5-7500 CPU 3.40GHZ</li>
      <li>Intel i350-T4 4x gigabit NIC</li>
    </ul>
  </li>
  <li>Supermicro X11DPH-T
    <ul>
      <li>Dual Xeon Gold 6138 (40C/80T, 2.0GHz, 3.7GHz boost)</li>
      <li>160GB Hyinx DDR4-2666 ECC (10x16gb)</li>
      <li>4x gtx1080</li>
      <li>Dual 10GbE</li>
      <li>2x2tb NVMe m.2</li>
      <li>4x10tb HHD</li>
      <li>IPMI remote management</li>
    </ul>
  </li>
  <li>AMD Ryzen 3500
    <ul>
      <li>RTX 2080ti</li>
      <li>2x gtx1080</li>
      <li>2TB pcie4 NVME</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/images/gallery/homelab1.jpg" alt="pfSense router" /></p>]]></content><author><name></name></author><category term="homelab" /><summary type="html"><![CDATA[I’m building a homelab for virtualization and development of Ai applications and other random widgets.]]></summary></entry></feed>